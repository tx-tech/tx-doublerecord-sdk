apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

def keystorePropertiesFile = rootProject.file("local.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
def configuration = rootProject.ext.configuration
def libraries = rootProject.ext.libraries
def appconfig = rootProject.ext.appconfig
android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    signingConfigs {

        config{
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    sourceSets {
        main {
            jniLibs.srcDirs = ['libs']
        }
    }

    defaultConfig {
        applicationId "com.txt.znsl"
        minSdkVersion 19
        targetSdkVersion 28
        versionCode configuration.versionCode
        versionName configuration.versionName
        multiDexEnabled true
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        defaultConfig {
            ndk {
                abiFilters "armeabi", "armeabi-v7a", "arm64-v8a"
            }
        }
//        manifestPlaceholders = [
//                JPUSH_PKGNAME: rootProject.ext.applicationId,
//                JPUSH_APPKEY : jpush_key, //JPush 上注册的包名对应的 Appkey.
//                JPUSH_CHANNEL: "developer-default", //暂时填写默认值即可.
//        ]
        //设置正式环境开关
        buildConfigField "String", "key","\"${keystoreProperties['key']}\""
        buildConfigField "String", "initVector","\"${keystoreProperties['initVector']}\""
        buildConfigField "String", "rekey","\"${keystoreProperties['rekey']}\""
        buildConfigField "String", "reinitVector","\"${keystoreProperties['reinitVector']}\""
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.config
        }
        debug {
            signingConfig signingConfigs.config
            minifyEnabled false
        }
    }

    //todo
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    applicationVariants.all { variant ->
        variant.outputs.all { output ->
            /*output.processResources.doFirst { pm ->
                String manifestPath = output.processResources.manifestFile
                println "=====test manifestPath=====$manifestPath"
                def manifestContent = file(manifestPath).getText()
                def xml = new XmlParser().parseText(manifestContent)
//                println "=====test xml=====$xml"
                // 增加一个meta-data节点
//                xml.application[0].appendNode("meta-data", ['android:name': 'channel', 'android:value': 'yingyongbao'])
                // 增加一个属性
//                xml.application[0].attributes().put("android:persistent", "true")

                def serialize = groovy.xml.XmlUtil.serialize(xml)
                file(manifestPath).write(serialize)
            }*/
//            if (variant.buildType.name == 'release') {
//                def fileName = "sldemo-" +configuration.versionName + ".apk"
//                outputFileName = new File("", fileName)
//            } else if (variant.buildType.name == 'debug') {
//                fileName =  "sldemo-" + configuration.versionName  + ".apk"
//            }
        }
    }
}

static def releaseTime() {
    return new Date().format("yyyy-MM-dd-HH-mm", TimeZone.getTimeZone("UTC+8"))
}


//static def computeVersionName() {
//    String date = new Date().format("yyMMddHHmm")
//    return Integer.parseInt(date)
//
//}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
//    implementation fileTree(dir: "libs", include: ["*.aar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:recyclerview-v7:28.0.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'

    api project(':base')




//    implementation 'com.github.tx-tech:tx-doublerecord-sdk:1.0.3'



//    implementation 'com.tencent.cloud:insurance-video:1.0.0'
//    implementation 'com.github.CymChad:BaseRecyclerViewAdapterHelper:2.9.50'
//    implementation ('com.tencent.cloud:insurance-video:1.2.0.4'){
//        exclude group: 'com.tencent.bugly', module: 'crashreport'
//    }
//    implementation 'com.github.bumptech.glide:glide:3.6.1'
//    implementation 'com.github.bumptech.glide:glide:4.7.1'
//    kapt 'com.github.bumptech.glide:compiler:4.7.1'
    implementation 'com.tencent.bugly:crashreport:3.4.4'  //其中latest.release指代最新Bugly SDK版本号，也可以指定明确的版本号，例如2.2.0
    debugImplementation 'com.squareup.leakcanary:leakcanary-android:2.6'
//    implementation 'com.github.JustinWjq:insurance-video:1.2.0.9'
////        exclude group: 'com.tencent.tbs.tbssdk', module: 'sdk'
//    }
//    implementation 'com.github.getActivity:XToast:6.9'
    //    implementation 'com.contrarywind:Android-PickerView:4.1.6'
//    implementation 'com.tencent.bugly:crashreport:3.3.3'
//    implementation 'com.tencent.bugly:nativecrashreport:3.9.1'
}